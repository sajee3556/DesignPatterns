Builder: "construct a complex object from simple objects using step-by-step approach"

    It provides clear separation between the construction and representation of an object.
    It provides better control over construction process.
    It supports to change the internal representation of objects.

Singleton: "define a class that has only one instance and provides a global point of access to it".

    Early Instantiation: creation of instance at load time.
    Lazy Instantiation: creation of instance when required.

    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Strategy Pattern: a class behavior or its algorithm can be changed at run time.
                    This type of design pattern comes under behavior pattern.
        ->defines the family of algorithms
        ->encapsulate each one
        ->make them interchangeable
        thus algorithm vary independently

        ** Single responsiblitiy principal  avoid class explosion and avoid code duplication in same level class
         ** Interface<Large Size> aggravation -> better to have more small interfaces **

    >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  Observer Pattern: is used when there is one-to-many relationship between objects such as if one object is modified,
   its depenedent objects are to be notified automatically. Observer pattern falls under behavioral pattern category.

   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Decorator pattern allows a user to add new functionality to an existing object without altering its structure.
           This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.
           This pattern creates a decorator class which wraps the original class and provides additional functionality
           keeping class methods signature intact.

           >attached (wrapper object) additional responsibility dynamically -> you can attach additional responsibility at
           run time, provide flexible alternative,
           **Inheritance is not code for resuse , inheritance is not for sharing behavior ** so compotion rather than the
           inheritance for sharing behavior.**

           ?? single responsible principal with small changes creates more classes that is un-manageable and adding new
           methods in existing class violate the open closed principal
           So

  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Factory Pattern : In Factory pattern, we create object without exposing the creation logic to the client and
                    refer to newly created object using a common interface.
                   Factory method pattern is one of Factory Pattern method -> Abstract factory method is similar to the
                   Factory Method pattern but in sense it's collection of Factory method pattern.

                    Factory method pattern construct a single object and Abstract Factory pattern constructs multiple
                    objects.

  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  Command Pattern: A request is wrapped under an object as command and passed to invoker object. Invoker object looks
                    for the appropriate object which can handle this command and passes the command to the
                    corresponding object which executes the command.

                    encapsulate the request as an object there by letting you other object with different request and queue
                    log request and suport undovable operation.

   >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

   Facade Pattern: